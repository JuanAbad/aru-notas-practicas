#+TITLE: PLSQL
#+SETUPFILE: ../../template.org
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../css/index.css" />
Numeros del 100 al 1:
#+begin_src sql
SET serveroutput ON;

DECLARE
  lanzamiento NUMBER(3) := 100;
BEGIN
  WHILE lanzamiento > 0 LOOP
    dbms_output.put( lanzamiento || ' ' );
    lanzamiento := lanzamiento - 1;
  END LOOP;

  dbms_output.put_line( '' );
  dbms_output.put_line( 'acabo el bucle' );
END;
#+end_src

Pedir un numero y mostrar sus divisores y si es primo:
#+begin_src sql
SET serveroutput ON;

DECLARE
  numero NUMBER(5) := 0;
  divisores NUMBER(5) := 0;
BEGIN
  numero := &1;
  dbms_output.put_line( 'Divisores de ' || numero || ':' );

  FOR i IN 1 .. numero LOOP
    IF MOD(numero, i) = 0 THEN
      dbms_output.put_line( i );
      divisores := divisores + 1;
    END IF;
  END LOOP;

  IF divisores < 3 THEN
    dbms_output.put_line( 'El numero es primo' );
  ELSE
    dbms_output.put_line( 'El numero no es primo' );
  END IF;
END;
#+end_src

Programa que admite una nota y nos dice con palabras la nota:
#+begin_src sql
SET serveroutput ON;

DECLARE
  nota NUMBER(3,1);
BEGIN
  nota := &1;

  IF nota < 0 THEN
    dbms_output.put_line( 'Tan penoso que tiene nota negativa' );
  ELSIF nota < 3 THEN
    dbms_output.put_line( 'Muy deficiente' );
  ELSIF nota < 5 THEN
    dbms_output.put_line( 'Insuficiente' );
  ELSIF nota < 6 THEN
    dbms_output.put_line( 'Suficiente' );
  ELSIF nota < 7 THEN
    dbms_output.put_line( 'Bien' );
  ELSIF nota < 9 THEN
    dbms_output.put_line( 'Notable' );
  ELSIF nota <= 10 THEN
    dbms_output.put_line( 'Sobresaliente' );
  ELSE
    dbms_output.put_line( 'Vaya nota mas rara tienes' );
  END IF;
END;
#+end_src

Visualizar los 10 ultimos multiplos de 7 menores de 1000
#+begin_src sql
SET serveroutput ON;

DECLARE
  ultimoMultiplo NUMBER(3) := 0;
  desde NUMBER(3) := 999;
  multiplo NUMBER(1) := 7;
  cantidad NUMBER(2) := 10;
BEGIN
  WHILE ultimoMultiplo = 0 LOOP
    IF MOD(desde, multiplo) = 0 THEN
      ultimoMultiplo := desde;
    ELSE
      desde := desde - 1;
    END IF;
  END LOOP;

  FOR i IN 1 .. cantidad LOOP
    dbms_output.put_line( ultimoMultiplo );
    ultimoMultiplo := ultimoMultiplo - multiplo;
  END LOOP;
END;
#+end_src

Numeros capicuas desde el 1000 hasta el 9999 (de 4 cifras):
#+begin_src sql
SET serveroutput ON;

BEGIN
  FOR i IN 1000 .. 9999 LOOP
    IF TRUNC(i / 100) = MOD(i, 10) * 10 + MOD(TRUNC(i / 10), 10) THEN
      dbms_output.put_line( i );
    END IF;
  END LOOP;
END;
#+end_src

Crear un reloj digital:
#+begin_src sql
SET serveroutput ON;

BEGIN
  FOR i IN 0 .. 23 LOOP
    FOR j IN 0 .. 59 LOOP
      dbms_output.put_line( LPAD(i, 2, '0') || ':' || LPAD(j, 2, '0') );
    END LOOP;
  END LOOP;
END;
#+end_src

Programa que acepta un numero de 5 digitos y visualiza cuantos
divisores tieney cuales son:
#+begin_src sql
SET serveroutput ON;

DECLARE
  numero NUMBER(5) := 0;
  raiz NUMBER(3) := 0;
  total NUMBER(3) := 0;
  i NUMBER(5) := 1;
BEGIN
  numero := &1;
  raiz := SQRT(numero);

  WHILE i < TRUNC(numero / 2) AND NOT (i > raiz AND total = 0) LOOP
    IF MOD(numero, i) = 0 THEN
      dbms_output.put_line(i);
      total := total + 1;
    END IF;
    i := i + 1;
  END LOOP;

  IF numero > 1 THEN
    dbms_output.put_line(numero);
    total := total + 1;
  END IF;

  dbms_output.put_line( 'Numero de divisores: ' || total );
END;
#+end_src

Listado de numeros primos hasta 100.000:
#+begin_src sql
SET serveroutput ON SIZE UNLIMITED;

DECLARE
  n NUMBER;
  tieneDivisor BOOLEAN;
BEGIN
  FOR i IN 1 .. 100000 LOOP
    IF MOD(i, 2) = 0 AND i != 2 THEN
      tieneDivisor := TRUE;
    ELSE
      n := 3;
      tieneDivisor := FALSE;
      WHILE NOT tieneDivisor AND n <= SQRT(i) LOOP
        IF MOD(i, n) = 0 THEN
          tieneDivisor := TRUE;
        ELSE
          n := n + 2;
        END IF;
      END LOOP;
    END IF;

    IF NOT tieneDivisor THEN
      dbms_output.put_line(i);
    END IF;
  END LOOP;
END;
#+end_src

Insertar 100 registros en paises con distinto nombre.
#+begin_src sql
SET serveroutput ON;

DECLARE
  ultimoID NUMBER(3);
BEGIN
  SELECT NVL(MAX(c_pais), 0) + 1 INTO ultimoID FROM paises;
  for i IN 1 .. 100 LOOP
    INSERT INTO paises (c_pais, nombre_pais) VALUES (i + ultimoID, 'Pepino ' || i);
  END LOOP;
END;
#+end_src
